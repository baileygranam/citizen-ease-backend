generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApplicationType {
  id          String    @id @default(uuid())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  immigrationHistory ImmigrationHistory[]

  @@map("application_types")
}

model Business {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  referralSources ReferralSource[]
  cases           Case[]
  clients         Client[]
  users           User[]

  @@map("businesses")
}

model Case {
  id        String     @id @default(uuid())
  status    CaseStatus
  startedAt DateTime?
  endedAt   DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?

  business   Business @relation(fields: [businessId], references: [id])
  businessId String

  caseManager   User   @relation(fields: [caseManagerId], references: [id])
  caseManagerId String

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  documents  Document[]
  notes      Note[]
  timeSheets Timesheet[]

  @@map("cases")
}

model Client {
  id                String         @id @default(uuid())
  firstName         String
  lastName          String?
  email             String?
  phoneNumber       String?
  birthdate         DateTime?      @db.Date
  gender            Gender?
  maritalStatus     MartialStatus?
  addressLine1      String?
  addressLine2      String?
  addressCity       String?
  addressState      String?
  addressZipcode    String?
  addressCountry    String?
  preferredLanguage Language?
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  deletedAt         DateTime?

  business   Business @relation(fields: [businessId], references: [id])
  businessId String

  referralSource   ReferralSource @relation(fields: [referralSourceId], references: [id])
  referralSourceId String

  cases              Case[]
  criminalHistory    CriminalHistory[]
  documents          Document[]
  entries            Entries[]
  immigrationHistory ImmigrationHistory[]

  @@map("clients")
}

model CriminalHistory {
  id                 String       @id @default(uuid())
  caseNumber         String?
  jurisdiction       String?
  convictionDate     DateTime?    @db.Date
  offenseDate        DateTime?    @db.Date
  offenseType        String?
  offenseSeverity    String?
  offenseDescription String?
  disposition        Disposition?
  notes              String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  deletedAt          DateTime?

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  @@map("criminal_history")
}

model Document {
  id          String    @id @default(uuid())
  description String
  fileName    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  case   Case?   @relation(fields: [caseId], references: [id])
  caseId String?

  client   Client? @relation(fields: [clientId], references: [id])
  clientId String?

  @@map("documents")
}

model Entries {
  id             String    @id @default(uuid())
  entryPort      String?
  entryDate      DateTime? @db.Date
  exitDate       DateTime? @db.Date
  exitReason     String?
  statusAtEntry  String?
  caughtAtBorder Boolean
  fingerprinted  Boolean
  photoTaken     Boolean
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  @@map("entries")
}

model ImmigrationHistory {
  id           String             @id @default(uuid())
  notes        String?
  filingDate   DateTime?          @db.Date
  decisionDate DateTime?          @db.Date
  status       ApplicationStatus?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  applicationType   ApplicationType @relation(fields: [applicationTypeId], references: [id])
  applicationTypeId String

  @@map("immigration_history")
}

model Note {
  id          String    @id @default(uuid())
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  case   Case   @relation(fields: [caseId], references: [id])
  caseId String

  @@map("notes")
}

model Timesheet {
  id          String    @id @default(uuid())
  title       String
  description String?
  minutes     Int
  loggedAt    DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  case   Case   @relation(fields: [caseId], references: [id])
  caseId String

  @@map("timesheets")
}

model User {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  email       String    @unique
  phoneNumber String    @unique
  password    String
  role        Role
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  business   Business @relation(fields: [businessId], references: [id])
  businessId String

  cases      Case[]
  notes      Note[]
  timeSheets Timesheet[]

  @@map("users")
}

model ReferralSource {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  business   Business @relation(fields: [businessId], references: [id])
  businessId String

  clients Client[]

  @@map("referral_sources")
}

enum CaseStatus {
  OPEN
  CLOSED
}

enum Disposition {
  GUILTY
  NOT_GUILTY
  ACQUITTAL
  PROBATION
  PLEA_BARGAIN
  DEFERRED_ADJUDICATION
  DISMISSAL
  EXPUNGEMENT
  DIVERSION_PROGRAMS
  NOLO_CONTENDERE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ApplicationStatus {
  APPROVED
  DENIED
}

enum Language {
  ENGLISH
  SPANISH
  CHINESE
  TAGALOG
  VIETNAMESE
  ARABIC
  FRENCH
  ITALIAN
  KOREAN
  RUSSIAN
  PORTUGUESE
  HINDI
}

enum MartialStatus {
  SINGLE
  MARRIED
  DIVORCED
  SEPARATED
  WIDOWED
  DOMESTIC_PARTNERSHIP
  CIVIL_UNION
  ANNULLED
}

enum Role {
  ADMIN
  CLIENT
}
